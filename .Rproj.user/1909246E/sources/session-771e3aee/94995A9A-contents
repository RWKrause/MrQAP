#' Internal auxiliary function to permute matrices or arrays
#'
#' @param m matrix, array, or list; a \code{matrix}, \code{array}, or \code{list} thereof to be permuted
#' @param groups vector; \code{vector} with respective grouping (see \code{?QAPglm()} and \code{?QAPcss()})
#' @param CSS logical; is it a CSS structure
#'
#' @returns a permuted \code{matrix} or \code{array} or \code{list} thereof as provided in \code{m}
#' @export

RMPerm <- function(m, groups = NULL, CSS = FALSE) {

  if (is.null(groups)) {
    groups <- rep(1,dim(m)[2])
  } else {
    groups <- as.character(groups)
  }
  if (is.list(m)) {
    return(lapply(m, RMPerm, groups = groups))
  }
  if (length(dim(m)) == 2) {
    o <- unsplit(lapply(split(1:dim(m)[1],groups), FUN = sample),groups)
    p <- matrix(data = m[o, o], nrow = dim(m)[1], ncol = dim(m)[2])
  } else if (CSS) {
    p <- array(dim = c(dim(m)[1], dim(m)[2], dim(m)[3]))
    o <- unsplit(lapply(split(1:dim(m)[2],groups), FUN = sample),groups)
    p[, , ] <- array(m[o, o, o])
  } else {
    p <- array(dim = c(dim(m)[1], dim(m)[2], dim(m)[3]))
    for (i in 1:dim(m)[1]) {
      o <- unsplit(lapply(split(1:dim(m)[2],groups), FUN = sample),groups)
      p[i, , ] <- array(m[i, o, o])
    }
  }
  return(p)
}
